// –ú–æ–¥—É–ª—å –º–∞–ø–∏
export function initMap() {
    const map = new maplibregl.Map({
        container: 'map',
        style: 'https://demotiles.maplibre.org/style.json',
        center: [30.5, 50.45],
        zoom: 4
    });
    
    // –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏ —Å—Ç–∏–ª—ñ–≤
    addMapControls(map);
    
    // –î–æ–¥–∞—Ç–∏ –ª–µ–≥–µ–Ω–¥—É
    addLegend(map);
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤
    map.on('click', handleMapClick);
    
    return map;
}

function addMapControls(map) {
    const controlsHTML = `
        <div class="map-controls">
            <button class="map-style-btn active" data-style="default">üåç –°—Ç–∞–Ω–¥–∞—Ä—Ç</button>
            <button class="map-style-btn" data-style="dark">üåë –¢–µ–º–Ω–∞</button>
            <button class="map-style-btn" data-style="satellite">üõ∞Ô∏è –°—É–ø—É—Ç–Ω–∏–∫</button>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', controlsHTML);
    
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∏–ª—é
    document.querySelectorAll('.map-style-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.map-style-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            changeMapStyle(map, btn.dataset.style);
        });
    });
}

export function changeMapStyle(map, style) {
    const styles = {
        'default': 'https://demotiles.maplibre.org/style.json',
        'dark': 'https://tiles.stadiamaps.com/styles/alidade_smooth_dark.json',
        'satellite': 'https://demotiles.maplibre.org/style.json' // –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à–∏–π
    };
    
    map.setStyle(styles[style] || styles.default);
}

function addLegend(map) {
    const legendHTML = `
        <div class="map-legend hidden" id="mapLegend">
            <div style="font-weight: 600; margin-bottom: 12px;">–ï—Ñ–µ–∫—Ç–∏ —É–¥–∞—Ä—É</div>
            <div class="legend-item">
                <div class="legend-color" style="background: #888888;"></div>
                <div class="legend-label">üï≥Ô∏è –ö—Ä–∞—Ç–µ—Ä</div>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #FF6B35;"></div>
                <div class="legend-label">üí• –£–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è</div>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #FFB627;"></div>
                <div class="legend-label">üî• –¢–µ–ø–ª–æ–≤–µ –≤–∏–ø—Ä–æ–º—ñ–Ω—é–≤–∞–Ω–Ω—è</div>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #00D9FF;"></div>
                <div class="legend-label">üåç –ó–µ–º–ª–µ—Ç—Ä—É—Å</div>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #0077BE;"></div>
                <div class="legend-label">üåä –¶—É–Ω–∞–º—ñ</div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', legendHTML);
}

function handleMapClick(e) {
    window.APP_STATE.selectedCoords = e.lngLat;
    
    // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π –º–∞—Ä–∫–µ—Ä
    if (window.APP_STATE.marker) {
        window.APP_STATE.marker.remove();
    }
    
    // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Ä–∫–µ—Ä
    window.APP_STATE.marker = new maplibregl.Marker({color: '#EF4444'})
        .setLngLat([e.lngLat.lng, e.lngLat.lat])
        .addTo(window.APP_STATE.map);
    
    // –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –ø–∞–Ω–µ–ª—ñ
    const coordsEl = document.getElementById('selectedCoords');
    if (coordsEl) {
        coordsEl.textContent = `üìç ${e.lngLat.lat.toFixed(2)}¬∞, ${e.lngLat.lng.toFixed(2)}¬∞`;
    }
    
    // –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —É–¥–∞—Ä—É
    const impactBtn = document.getElementById('impactBtn');
    if (impactBtn) {
        impactBtn.disabled = false;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤
export function drawImpactEffects(layers) {
    const map = window.APP_STATE.map;
    const coords = window.APP_STATE.selectedCoords;
    
    // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —à–∞—Ä–∏
    ['crater', 'airburst', 'thermal', 'seismic', 'tsunami'].forEach(id => {
        if (map.getLayer(id)) map.removeLayer(id);
        if (map.getSource(id)) map.removeSource(id);
    });
    
    // –ù–∞–º–∞–ª—é–≤–∞—Ç–∏ –Ω–æ–≤—ñ
    layers.forEach(layer => {
        const circle = createCircle(coords, layer.radius_km);
        
        map.addSource(layer.type, {
            type: 'geojson',
            data: circle
        });
        
        map.addLayer({
            id: layer.type,
            type: 'fill',
            source: layer.type,
            paint: {
                'fill-color': layer.color,
                'fill-opacity': 0.3,
                'fill-outline-color': layer.color
            }
        });
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–µ–≥–µ–Ω–¥—É
    document.getElementById('mapLegend').classList.remove('hidden');
}

function createCircle(center, radiusKm, points = 64) {
    const coords = [];
    const distanceX = radiusKm / (111.32 * Math.cos(center.lat * Math.PI / 180));
    const distanceY = radiusKm / 110.574;

    for (let i = 0; i < points; i++) {
        const theta = (i / points) * (2 * Math.PI);
        const x = distanceX * Math.cos(theta);
        const y = distanceY * Math.sin(theta);
        coords.push([center.lng + x, center.lat + y]);
    }
    coords.push(coords[0]);

    return {
        type: 'Feature',
        geometry: {
            type: 'Polygon',
            coordinates: [coords]
        }
    };
}