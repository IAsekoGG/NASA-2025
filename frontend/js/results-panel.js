// –ú–æ–¥—É–ª—å –ø–∞–Ω–µ–ª—ñ "–ù–∞—Å–ª—ñ–¥–∫–∏"
export function initResultsPanel() {
    const panel = document.getElementById('resultsPanel');
    
    panel.innerHTML = `
        <div class="panel-header">
            <div class="panel-title">üìä –ù–∞—Å–ª—ñ–¥–∫–∏ —É–¥–∞—Ä—É</div>
        </div>
        <div class="panel-body" id="resultsContent"></div>
    `;
}

export function showResults(data) {
    const panel = document.getElementById('resultsPanel');
    const content = document.getElementById('resultsContent');
    
    panel.classList.remove('hidden');
    
    let html = '';
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è
    html += `
        <div class="p-4 bg-red-50 rounded-lg mb-4 border-2 border-red-200">
            <div class="text-3xl font-bold text-red-800">‚ö° ${data.energy.energy_mt} –ú–µ–≥–∞—Ç–æ–Ω–Ω</div>
            <div class="text-sm text-gray-700 mt-2">
                <div>üí£ ${data.energy.hiroshima_eq} √ó –•—ñ—Ä–æ—Å—ñ–º–∞</div>
                <div>üß® ${(data.energy.tnt_kg / 1e6).toFixed(1)} –º–ª–Ω –∫–≥ TNT</div>
                <div>‚öôÔ∏è –ú–∞—Ç–µ—Ä—ñ–∞–ª: ${data.material}</div>
            </div>
        </div>
    `;
    
    // –ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ü–µ–Ω–∞—Ä—ñ—é
    if (data.scenario === 'ground') {
        html += renderGroundImpact(data);
    } else if (data.scenario === 'water') {
        html += renderWaterImpact(data);
    } else if (data.scenario === 'airburst') {
        html += renderAirburst(data);
    } else if (data.scenario === 'fragmentation') {
        html += renderFragmentation(data);
    }
    
    // –¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç
    html += `
        <div class="mt-4 p-4 bg-blue-50 rounded-lg border-2 border-blue-200">
            <div class="text-sm font-semibold text-blue-800 mb-1">üí° –¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç</div>
            <div class="text-sm text-gray-700">${data.fun_fact}</div>
        </div>
    `;
    
    content.innerHTML = html;
}

function renderGroundImpact(data) {
    let html = '';
    
    // –ö—Ä–∞—Ç–µ—Ä
    html += `
        <div class="mb-4">
            <h3 class="font-bold text-lg mb-2">üï≥Ô∏è –ö—Ä–∞—Ç–µ—Ä</h3>
            <div class="grid grid-cols-2 gap-2">
                <div class="p-3 bg-gray-100 rounded">
                    <div class="text-xs text-gray-600">–î—ñ–∞–º–µ—Ç—Ä</div>
                    <div class="text-lg font-bold">${data.crater.diameter_km} –∫–º</div>
                </div>
                <div class="p-3 bg-gray-100 rounded">
                    <div class="text-xs text-gray-600">–ì–ª–∏–±–∏–Ω–∞</div>
                    <div class="text-lg font-bold">${data.crater.depth_km} –∫–º</div>
                </div>
            </div>
            <div class="text-xs text-gray-600 mt-2">
                –í–∏–∫–∏–Ω—É—Ç–∞ –ø–æ—Ä–æ–¥–∞: ${(data.crater.ejecta_mass_kg / 1e9).toFixed(1)} –º–ª—Ä–¥ –∫–≥
            </div>
        </div>
    `;
    
    // –£–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è
    html += `
        <div class="mb-4">
            <h3 class="font-bold text-lg mb-2">üí• –£–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è</h3>
    `;
    
    data.airblast.slice(0, 4).forEach(zone => {
        html += `
            <div class="mb-2 p-3 rounded-lg border-l-4" style="background-color: ${zone.color}22; border-color: ${zone.color}">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <div class="font-semibold text-sm">${zone.effects}</div>
                        <div class="text-xs text-red-700 font-medium mt-1">${zone.casualties}</div>
                        <div class="text-xs text-gray-600 mt-1">–¢–∏—Å–∫: ${zone.pressure_kpa} –∫–ü–∞</div>
                    </div>
                    <div class="text-right">
                        <div class="font-bold text-lg">${zone.radius_km} –∫–º</div>
                    </div>
                </div>
            </div>
        `;
    });
    html += '</div>';
    
    // –¢–µ–ø–ª–æ–≤–µ –≤–∏–ø—Ä–æ–º—ñ–Ω—é–≤–∞–Ω–Ω—è
    html += `
        <div class="mb-4">
            <h3 class="font-bold text-lg mb-2">üî• –¢–µ–ø–ª–æ–≤–µ –≤–∏–ø—Ä–æ–º—ñ–Ω—é–≤–∞–Ω–Ω—è</h3>
    `;
    
    data.thermal.forEach(zone => {
        html += `
            <div class="mb-2 p-3 rounded-lg border-l-4" style="background-color: ${zone.color}22; border-color: ${zone.color}">
                <div class="flex justify-between items-start">
                    <div class="flex-1">
                        <div class="font-semibold text-sm">${zone.effects}</div>
                        <div class="text-xs text-red-700 font-medium mt-1">${zone.casualties}</div>
                        <div class="text-xs text-gray-600 mt-1">${zone.ignition}</div>
                    </div>
                    <div class="text-right">
                        <div class="font-bold text-lg">${zone.radius_km} –∫–º</div>
                    </div>
                </div>
            </div>
        `;
    });
    html += '</div>';
    
    // –°–µ–π—Å–º—ñ–∫–∞
    if (data.seismic && data.seismic.length > 0) {
        const maxMmi = data.seismic[0];
        html += `
            <div class="mb-4">
                <h3 class="font-bold text-lg mb-2">üåç –ó–µ–º–ª–µ—Ç—Ä—É—Å</h3>
                <div class="p-3 bg-purple-50 rounded-lg border-2 border-purple-200">
                    <div class="text-sm">
                        <div class="font-bold">–ú–∞–≥–Ω—ñ—Ç—É–¥–∞: ${maxMmi.magnitude_richter} –∑–∞ –†–∏—Ö—Ç–µ—Ä–æ–º</div>
                        <div class="text-xs text-gray-600 mt-1">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: MMI ${maxMmi.mmi}</div>
                    </div>
                </div>
            </div>
        `;
    }
    
    return html;
}

function renderWaterImpact(data) {
    let html = '';
    
    // –¶—É–Ω–∞–º—ñ
    html += `
        <div class="mb-4">
            <h3 class="font-bold text-lg mb-2">üåä –¶—É–Ω–∞–º—ñ</h3>
            <div class="p-3 bg-blue-50 rounded-lg border-2 border-blue-200 mb-3">
                <div class="grid grid-cols-2 gap-2 text-sm">
                    <div>
                        <div class="text-xs text-gray-600">–®–≤–∏–¥–∫—ñ—Å—Ç—å</div>
                        <div class="font-bold">${data.tsunami.wave_speed_kmh} –∫–º/–≥–æ–¥</div>
                    </div>
                    <div>
                        <div class="text-xs text-gray-600">–ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–∏—Å–æ—Ç–∞</div>
                        <div class="font-bold">${data.tsunami.initial_height_m} –º</div>
                    </div>
                </div>
            </div>
            
            <div class="text-xs font-semibold mb-2">–ü—Ä–∏–±—É—Ç—Ç—è —Ö–≤–∏–ª—å –Ω–∞ —Ä—ñ–∑–Ω—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ:</div>
            <div class="space-y-2">
    `;
    
    data.tsunami.zones.forEach(zone => {
        html += `
            <div class="p-2 bg-blue-50 rounded border-l-4 border-blue-400">
                <div class="flex justify-between text-sm">
                    <span class="font-semibold">${zone.distance_km} –∫–º</span>
                    <span class="text-blue-700">${zone.wave_height_m} –º –≤–∏—Å–æ—Ç–∞</span>
                </div>
                <div class="text-xs text-gray-600 mt-1">
                    –ß–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è: ${zone.arrival_time_min} —Ö–≤ | Run-up: ${zone.runup_m} –º
                </div>
            </div>
        `;
    });
    
    html += `
            </div>
            <div class="mt-2 p-2 bg-yellow-50 rounded text-xs">
                ‚ö†Ô∏è –ß–∞—Å –¥–ª—è –µ–≤–∞–∫—É–∞—Ü—ñ—ó: ${data.tsunami.warning_time_min} —Ö–≤–∏–ª–∏–Ω
            </div>
        </div>
    `;
    
    // –¢–µ–ø–ª–æ–≤–µ –≤–∏–ø—Ä–æ–º—ñ–Ω—é–≤–∞–Ω–Ω—è
    if (data.thermal) {
        html += `
            <div class="mb-4">
                <h3 class="font-bold text-lg mb-2">üî• –¢–µ–ø–ª–æ–≤–µ –≤–∏–ø—Ä–æ–º—ñ–Ω—é–≤–∞–Ω–Ω—è</h3>
        `;
        
        data.thermal.slice(0, 2).forEach(zone => {
            html += `
                <div class="mb-2 p-2 rounded border-l-4" style="background-color: ${zone.color}22; border-color: ${zone.color}">
                    <div class="text-sm font-semibold">${zone.effects}</div>
                    <div class="text-xs text-gray-600">–†–∞–¥—ñ—É—Å: ${zone.radius_km} –∫–º</div>
                </div>
            `;
        });
        html += '</div>';
    }
    
    return html;
}

function renderAirburst(data) {
    let html = '';
    
    html += `
        <div class="p-3 bg-orange-50 rounded-lg border-2 border-orange-200 mb-4">
            <div class="font-bold text-sm">üí• –í–∏–±—É—Ö –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ñ</div>
            <div class="text-xs text-gray-600 mt-1">
                –í–∏—Å–æ—Ç–∞ –¥–µ—Ç–æ–Ω–∞—Ü—ñ—ó: ${data.airburst_altitude_km} –∫–º
            </div>
            <div class="text-xs text-gray-500 mt-1">
                –ë–µ–∑ —É—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä–∞—Ç–µ—Ä–∞, –∞–ª–µ –ø–æ—Ç—É–∂–Ω–∞ —É–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è
            </div>
        </div>
    `;
    
    // –£–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è
    html += `
        <div class="mb-4">
            <h3 class="font-bold text-lg mb-2">üí• –£–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è</h3>
    `;
    
    data.airblast.slice(0, 5).forEach(zone => {
        html += `
            <div class="mb-2 p-3 rounded-lg border-l-4" style="background-color: ${zone.color}22; border-color: ${zone.color}">
                <div class="flex justify-between">
                    <div class="flex-1">
                        <div class="font-semibold text-sm">${zone.effects}</div>
                        <div class="text-xs text-red-700 mt-1">${zone.casualties}</div>
                    </div>
                    <div class="font-bold text-lg">${zone.radius_km} –∫–º</div>
                </div>
            </div>
        `;
    });
    html += '</div>';
    
    // –¢–µ–ø–ª–æ–≤–µ
    if (data.thermal) {
        html += '<div class="mb-4"><h3 class="font-bold text-lg mb-2">üî• –¢–µ–ø–ª–æ–≤–µ –≤–∏–ø—Ä–æ–º—ñ–Ω—é–≤–∞–Ω–Ω—è</h3>';
        data.thermal.slice(0, 2).forEach(zone => {
            html += `
                <div class="mb-2 p-2 rounded border-l-4" style="background-color: ${zone.color}22; border-color: ${zone.color}">
                    <div class="text-sm font-semibold">${zone.effects}</div>
                    <div class="text-xs">–†–∞–¥—ñ—É—Å: ${zone.radius_km} –∫–º</div>
                </div>
            `;
        });
        html += '</div>';
    }
    
    return html;
}

function renderFragmentation(data) {
    let html = '';
    
    html += `
        <div class="p-3 bg-purple-50 rounded-lg border-2 border-purple-200 mb-4">
            <div class="font-bold text-sm">üß© –†–æ–∑–∫–æ–ª –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏</div>
            <div class="text-xs text-gray-600 mt-1">
                –í–∏—Å–æ—Ç–∞ —Ä–æ–∑–ø–∞–¥—É: ${data.fragmentation.fragmentation_altitude_km} –∫–º
            </div>
            <div class="text-xs text-gray-600">
                –ó–∞–≥–∞–ª—å–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è: ${data.fragmentation.total_energy_mt} –ú—Ç
            </div>
        </div>
    `;
    
    html += '<div class="mb-4"><h3 class="font-bold text-lg mb-2">üíé –§—Ä–∞–≥–º–µ–Ω—Ç–∏</h3>';
    
    data.fragmentation.fragments.forEach(frag => {
        html += `
            <div class="mb-3 p-3 bg-gray-50 rounded-lg border-2 border-gray-300">
                <div class="flex justify-between items-start mb-2">
                    <div class="font-bold text-sm">–§—Ä–∞–≥–º–µ–Ω—Ç #${frag.id}</div>
                    <div class="text-xs bg-red-100 px-2 py-1 rounded">${frag.energy_mt} –ú—Ç</div>
                </div>
                <div class="grid grid-cols-2 gap-2 text-xs">
                    <div>
                        <div class="text-gray-600">–†–æ–∑–º—ñ—Ä</div>
                        <div class="font-semibold">${frag.size_m} –º</div>
                    </div>
                    <div>
                        <div class="text-gray-600">–†–∞–¥—ñ—É—Å –≤–∏–±—É—Ö—É</div>
                        <div class="font-semibold">${frag.blast_radius_km} –∫–º</div>
                    </div>
                </div>
                <div class="text-xs text-gray-500 mt-1">
                    –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —É–¥–∞—Ä–∞–º–∏: ${frag.separation_km} –∫–º
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ —É–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è
    if (data.airblast) {
        html += '<div class="mb-4"><h3 class="font-bold text-lg mb-2">üí• –°—É–º–∞—Ä–Ω–∞ —É–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è</h3>';
        data.airblast.slice(0, 3).forEach(zone => {
            html += `
                <div class="mb-2 p-2 rounded border-l-4" style="background-color: ${zone.color}22; border-color: ${zone.color}">
                    <div class="text-sm">${zone.effects}</div>
                    <div class="text-xs">–†–∞–¥—ñ—É—Å: ${zone.radius_km} –∫–º</div>
                </div>
            `;
        });
        html += '</div>';
    }
    
    return html;
}