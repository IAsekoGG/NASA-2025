export function initResultsPanel() {
  console.log('‚úÖ Results panel –≥–æ—Ç–æ–≤–∞');
}

export function showResults(data) {
  const panel = document.getElementById('resultsPanel');
  const isWaterScenario = data.scenario === 'water';
  
  let html = `
    <div class="panel-header">
      <div class="panel-title">üìä –ù–∞—Å–ª—ñ–¥–∫–∏ —É–¥–∞—Ä—É</div>
      <button class="btn-close" onclick="document.getElementById('resultsPanel').classList.add('hidden')">‚úï</button>
    </div>
    
    <div class="panel-body">
      <div class="result-section">
        <h3>‚ö° –ï–Ω–µ—Ä–≥—ñ—è</h3>
        <div class="stat-grid">
          <div class="stat-card">
            <div class="stat-label">–ï–Ω–µ—Ä–≥—ñ—è —É–¥–∞—Ä—É</div>
            <div class="stat-value">${formatNumber(data.energy.energy_mt)} –ú–¢</div>
            <div class="stat-sub">‚âà ${formatNumber(data.energy.hiroshima_eq)} –±–æ–º–± –Ω–∞ –•—ñ—Ä–æ—Å—ñ–º—É</div>
          </div>
        </div>
      </div>

      ${data.crater ? `
      <div class="result-section">
        <h3>üï≥Ô∏è –ö—Ä–∞—Ç–µ—Ä</h3>
        <div class="stat-grid">
          <div class="stat-card">
            <div class="stat-label">–î—ñ–∞–º–µ—Ç—Ä</div>
            <div class="stat-value">${data.crater.diameter_km} –∫–º</div>
          </div>
          <div class="stat-card">
            <div class="stat-label">–ì–ª–∏–±–∏–Ω–∞</div>
            <div class="stat-value">${data.crater.depth_km} –∫–º</div>
          </div>
        </div>
      </div>
      ` : ''}

      ${data.airblast ? `
      <div class="result-section">
        <h3>üí• –£–¥–∞—Ä–Ω–∞ —Ö–≤–∏–ª—è</h3>
        <div class="zones-list">
          ${data.airblast.slice(0, 3).map(zone => `
            <div class="zone-item">
              <div class="zone-color" style="background: ${zone.color}"></div>
              <div class="zone-info">
                <div class="zone-name">${translateZone(zone.type)}</div>
                <div class="zone-stats">${zone.radius_km} –∫–º ‚Ä¢ ${zone.pressure_kpa} –∫–ü–∞</div>
                <div class="zone-effects">${zone.effects}</div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
      ` : ''}

      ${data.thermal ? `
      <div class="result-section">
        <h3>üî• –¢–µ–ø–ª–æ–≤–µ –≤–∏–ø—Ä–æ–º—ñ–Ω—é–≤–∞–Ω–Ω—è</h3>
        <div class="thermal-info">
          ${data.thermal.slice(0, 2).map(zone => `
            <div class="thermal-zone">
              <strong>${zone.effects}</strong> - ${zone.radius_km} –∫–º (${zone.temperature_c}¬∞C)
            </div>
          `).join('')}
        </div>
      </div>
      ` : ''}

      ${!isWaterScenario && data.casualties ? `
      <div class="result-section alert-danger">
        <h3>üíÄ –õ—é–¥—Å—å–∫—ñ –≤—Ç—Ä–∞—Ç–∏</h3>
        <div class="location-info">
          üìç ${data.location.nearest_city} (${data.location.area_type}), 
          üë• ${formatNumber(data.location.density)} –ª—é–¥/–∫–º¬≤
        </div>
        <div class="stat-grid">
          <div class="stat-card danger">
            <div class="stat-label">–ó–∞–≥–∏–±–ª—ñ</div>
            <div class="stat-value">${formatNumber(data.casualties.total_deaths)}</div>
          </div>
          <div class="stat-card warning">
            <div class="stat-label">–ü–æ—Ä–∞–Ω–µ–Ω—ñ</div>
            <div class="stat-value">${formatNumber(data.casualties.total_injuries)}</div>
          </div>
          <div class="stat-card info">
            <div class="stat-label">–ü–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–æ</div>
            <div class="stat-value">${formatNumber(data.casualties.affected_population)}</div>
          </div>
        </div>
      </div>
      ` : ''}

      ${!isWaterScenario && data.economic_damage ? `
      <div class="result-section alert-warning">
        <h3>üí∞ –ï–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –∑–±–∏—Ç–∫–∏</h3>
        <div class="stat-grid">
          <div class="stat-card">
            <div class="stat-label">–ó–∞–≥–∞–ª—å–Ω—ñ –∑–±–∏—Ç–∫–∏</div>
            <div class="stat-value">${formatMoney(data.economic_damage.total_damage_usd)}</div>
          </div>
          <div class="stat-card">
            <div class="stat-label">–£—Ä–∞–∂–µ–Ω–∞ –ø–ª–æ—â–∞</div>
            <div class="stat-value">${formatNumber(data.economic_damage.affected_area_km2)} –∫–º¬≤</div>
          </div>
        </div>
      </div>
      ` : ''}

      ${data.tsunami ? `
      <div class="result-section">
        <h3>üåä –¶—É–Ω–∞–º—ñ</h3>
        <div class="stat-grid">
          <div class="stat-card">
            <div class="stat-label">–ü–æ—á–∞—Ç–∫–æ–≤–∞ –≤–∏—Å–æ—Ç–∞</div>
            <div class="stat-value">${data.tsunami.initial_height_m} –º</div>
          </div>
          <div class="stat-card">
            <div class="stat-label">–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ö–≤–∏–ª—ñ</div>
            <div class="stat-value">${data.tsunami.wave_speed_kmh} –∫–º/–≥–æ–¥</div>
          </div>
        </div>
        <div class="tsunami-zones">
          ${data.tsunami.zones.slice(0, 3).map(z => `
            <div class="tsunami-zone">
              <strong>${z.distance_km} –∫–º:</strong> –≤–∏—Å–æ—Ç–∞ ${z.wave_height_m} –º, 
              –ø—Ä–∏–±—É—Ç—Ç—è —á–µ—Ä–µ–∑ ${z.arrival_time_min} —Ö–≤
            </div>
          `).join('')}
        </div>
      </div>
      ` : ''}

      ${data.strategic_risks && data.strategic_risks.length > 0 ? `
      <div class="result-section alert-critical">
        <h3>‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω—ñ —Ä–∏–∑–∏–∫–∏</h3>
        ${data.strategic_risks.map(risk => `
          <div class="risk-item ${risk.severity}">
            <div class="risk-icon">${getRiskIcon(risk.type)}</div>
            <div class="risk-text">${risk.description}</div>
          </div>
        `).join('')}
      </div>
      ` : ''}

      <div class="fun-fact">üí° ${data.fun_fact}</div>
    </div>
  `;

  panel.innerHTML = html;
  panel.classList.remove('hidden');
}

function formatNumber(num) {
  if (num >= 1_000_000) return (num / 1_000_000).toFixed(1) + 'M';
  if (num >= 1_000) return (num / 1_000).toFixed(1) + 'K';
  return num.toFixed(0);
}

function formatMoney(usd) {
  if (usd >= 1e12) return '$' + (usd / 1e12).toFixed(1) + ' —Ç—Ä–ª–Ω';
  if (usd >= 1e9) return '$' + (usd / 1e9).toFixed(1) + ' –º–ª—Ä–¥';
  if (usd >= 1e6) return '$' + (usd / 1e6).toFixed(1) + ' –º–ª–Ω';
  return '$' + (usd / 1e3).toFixed(0) + 'K';
}

function translateZone(type) {
  const types = {
    'total_destruction': '–ü–æ–≤–Ω–µ –∑–Ω–∏—â–µ–Ω–Ω—è',
    'heavy_damage': '–í–∞–∂–∫—ñ —Ä—É–π–Ω—É–≤–∞–Ω–Ω—è',
    'moderate_damage': '–°–µ—Ä–µ–¥–Ω—ñ —Ä—É–π–Ω—É–≤–∞–Ω–Ω—è',
    'light_damage': '–õ–µ–≥–∫—ñ —Ä—É–π–Ω—É–≤–∞–Ω–Ω—è',
    'glass_breakage': '–í–∏–±–∏—Ç—ñ –≤—ñ–∫–Ω–∞'
  };
  return types[type] || type;
}

function getRiskIcon(type) {
  const icons = {
    'nuclear': '‚ò¢Ô∏è',
    'major_city': 'üèôÔ∏è',
    'industrial': 'üè≠'
  };
  return icons[type] || '‚ö†Ô∏è';
}